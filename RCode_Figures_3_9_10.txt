######################################
### MSDS_455-DL_SEC55              ###
### Team B - The Show              ###
### Austin D Chenelle - 06/13/2020 ###
### Created in R version 3.6.3     ###
######################################

# Basic Instructuions - Please Read

# Change .txt suffix to .R and run within R studio or a standalone R session
# This script is meant as a turnkey program. Ensure that all input files are in the same folder and there should be no run issues, just install libraries and run all code
# Has only been run on a Windows PC, compatability with Mac or Linux systems is untested
# Input files needed within the same folder as this script are: "network latency.csv", "awareness.csv", "sensors.csv",
# "statistic_id1068697_projected-production-of-robo-cars-worldwide-2023-2030.xlsx" and "statistic_id875080_autonomous-vehicles---global-market-penetration-2021-2030.xlsx"
# For technical assistance pelase contact Austin Chenelle at austin.chenelle@uscellular.com or austinchenelle2020@u.nothwestern.edu


########################
library(extrafont) # library that allows any font file to be used in R outputs, will use in ggplot graphs
library(readxl) # library that allows for easy import of data from excel workbooks
library(forcats) # needed to work effectively with factors, used to reorder categorical factors for graphic purposes 
library(data.table) # this library allows for easy dataframe manipulation, adds utility to base R functions
library(ggplot2) # popular graphical library that allows for beautiful and highly customizable plots
library(ggExtra) # adds even more functionality to the ggplot2 library
library(RColorBrewer) # Library that allows use of the color brewer palettes in R. Has the "Paired" palette that is used throughout group B's The Show

# The next two lines only need to be run once per computer. It uses extrafont to discover and import fonts on the machine for use in R
font_import()  #discovers all fonts on local machine
loadfonts(device = "win") # this line may beed to be changed for Mac and Linux systems

setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # sets working directory to R code and input files location

##################################################
### Figure 3: Projcted Worldwide Market Share ###
##################################################

robo <- read_excel("statistic_id1068697_projected-production-of-robo-cars-worldwide-2023-2030.xlsx", sheet="Data", range = "B5:C13") # reads in the regional breakdown table within the excel workbook, by cell range
penetration <- read_excel("statistic_id875080_autonomous-vehicles---global-market-penetration-2021-2030.xlsx", sheet="Data", range = "B5:C15") # reads in the regional breakdown table within the excel workbook, by cell range

# Just some basic housekeeping, renaming ambiguous columns
names(robo)[1] <- "Year"
names(robo)[2] <- "Production"

names(penetration)[1] <- "Year"
names(penetration)[2] <- "Registration"
penetration$StandardPercentage <- 100-penetration$Registration # we need to find percentage of non-autonomous vehicles

growth <- merge(robo,penetration, by="Year") # combine our two tables for future use

growth$Production<-growth$Production/1000 # normalize data

growth$Total <- (growth$Production/(growth$Registration/100)) # find total number of vehicles projected for each year

growth$Standard <- (growth$Total*(growth$StandardPercentage/100)) # calculate total non-autonomous vehicles projected for each year


growth$Year <-lubridate::ymd(growth$Year, truncated = 2L) # adjust ambiguos month/day fields to january 1st for easier graphing


# remove unnessesary columns and rename some columns, just housekeeping again

totals <- growth[ -c(3:5) ] 
names(totals)[2] <- "Autonomous"
names(totals)[3] <- "Manually-Driven"

percentages <- growth[ -c(2,5,6) ]
names(percentages)[2] <- "Autonomous"
names(percentages)[3] <- "Manually-Driven"

# melt our data into two tables that can be used for stacked bar charts. totals is total production, percentages is percentage contribution by category
totals <- melt(totals, id='Year')
names(totals)[2] <- "Type"

percentages <- melt(percentages, id='Year')
names(percentages)[2] <- "Type"

###########################################################################################################################################################
# Only one of these next two graphs will be used in the final version of The Show.
# Update: the first graph will be used, second will not be included in prezi presentation

# We will be using the colorbrewer "Paired" palette, every color in that palette has it's hex code lsited below for manual reference
# light blue: "#A6CEE3" dark blue: "#1F78B4" light green: "#B2DF8A" dark green: "#33A02C" light red: "#FB9A99" dark red: "#E31A1C"
# light orange: "#FDBF6F" dark orange: "#FF7F00" light purple: "#CAB2D6" dark purple: "#6A3D9A" light yellow: "#FFFF99" brown: "#B15928"

#This is a stacked bar chart that shows breakdown of percentage market share, as calculated by vehicle registration numbers

png("PercentMarketShare.png", units="in", width=10, height=10, res=300) 

ggplot(data=percentages, aes(x=Year, y=value, fill=Type)) +
  geom_bar(stat="identity",position="stack")+
  scale_fill_manual(values=c("#FF7F00","#A6CEE3"))+
 #scale_fill_brewer(palette = "Paired") +
  ggtitle("Projected Worldwide Registrations") + # main chart title
  xlab("Year") + ylab("Percentage") + # set axis titles
  theme(panel.background = element_rect(fill = 'white', colour = 'white')) + #removed grey background
  scale_y_continuous(expand=c(0,0),breaks=c(25,50,75,88,100)) + # remove buffer on y-axis, also manually set 25% intervals as well as 88% reference line
  scale_x_date(date_breaks = "years" , date_labels = "%Y",expand=c(0,0))+
  #scale_y_continuous(expand=c(0,0)) +
  theme_minimal()+
  removeGrid(y = FALSE)+
  geom_hline(yintercept=88, linetype="solid",  # add a reference line to the y-axis to show 2030 projection values
             color = "black", size=.5,alpha=.4)+
  theme(plot.title = element_text(color="black", size=22, face="bold",family="Times New Roman"), # the rest of these lines set fonts and sizes
        axis.title.x = element_text(color="black", size=16,family="Times New Roman"),
        axis.title.y = element_text(color="black", size=16,family="Times New Roman"),
        axis.text = element_text(size = 14,family="Times New Roman")) +
  theme(legend.text=element_text(size=14,family="Times New Roman"),
        legend.title=element_text(size=16))+
  theme(text=element_text(family="Times New Roman"),panel.grid.minor = element_blank())+
  theme(axis.text.x = element_text(hjust=.5))

dev.off()

######################################################################################################################################################


# Here is a combination of percent registrations and total production numbers worldwire. Yearly numbers were compiled for autonomous and manually-driven
png("YearlyProduction.png", units="in", width=8, height=6, res=300) 

ggplot(data=totals, aes(x=Year, y=value, fill=forcats::fct_rev(Type))) + # reverse order that bars are stacked for readability
  geom_bar(stat="identity",position="stack")+ # stack as opposed to dodge positioning
  scale_fill_manual(values=c("#A6CEE3","#FF7F00"))+ # manually set xolors using the hex codes of two colors in the colorbrewer "Paired" palette
 # scale_fill_brewer(palette = "Paired") + # can also simply call the Paired palette but I don't like the default colors chosen
  ggtitle("Yearly Production") + # main chart title
  xlab("Year") + ylab("Units in Millions") + # set axis titles
  theme(panel.background = element_rect(fill = 'white', colour = 'white')) + #removed grey background
  scale_y_continuous(expand=c(0,0)) + # remove buffer on y-axis, makes graph cleaner
  scale_x_date(date_breaks = "years" , date_labels = "%Y",expand=c(.01,0))+ # this line minimizes the tick marks drawn past the y-axis
  theme_minimal()+
  removeGrid(y = FALSE)+ # keep the y-axis gridlines
  labs(fill = "Type")+
  #geom_hline(yintercept=10, linetype="solid", 
  #           color = "red", size=.5)+
  theme(plot.title = element_text(color="black", size=22, face="bold",family="Times New Roman"), # the rest of these lines set fonts and sizes
        axis.title.x = element_text(color="black", size=16,family="Times New Roman"),
        axis.title.y = element_text(color="black", size=16,family="Times New Roman"),
        axis.text = element_text(size = 14,family="Times New Roman")) +
  theme(legend.text=element_text(size=14,family="Times New Roman"),
        legend.title=element_text(size=16))+
  theme(text=element_text(family="Times New Roman"),panel.grid.minor = element_blank())
dev.off()
################################################################################################################


#################################
### Figure 9: Network Latency ###
#################################

df2 <- read.csv("network latency.csv") # reads in network latency csv that was taken from more extensive github link. check The Show data dictionary for link


# Yearly breakdown of network latency by technology

text ="Target: 10mS" # Will be used when drawing target latency line in plot

png("networkLatency.png", units="in", width=7.5, height=8, res=300) # name the png that we will write latency graph to

ggplot(data=df2, aes(x=Year, y=Latency, fill=Technology)) +
  geom_bar(stat="identity",position="dodge")+ # dodge option puts individual variable bars next to each other, for any given year
  scale_fill_brewer(palette = "Paired") + # this sets the color palette to the chosen aesthetic for the project
  ggtitle("Network Latency over Time") + # main chart title
  xlab("Year") + ylab("Latency in mS") + # set axis titles
  theme(panel.background = element_rect(fill = 'white', colour = 'white')) + #removed grey background
  scale_y_continuous(expand=c(0,0),breaks=c(10,50,100, 200, 300)) + # remove buffer on y-axis, makes graph cleaner
  theme_minimal()+ # great minimalist theme tyhat assists in improving data-ink ratio
  removeGrid(y = FALSE)+ # keeps y-axis ticks and gridlines, makes it easier to follow the graphic
  geom_hline(yintercept=10, linetype="solid", # adds referenc line of target latency for Autonomous Vehicles to be feasible on a cellular network
               color = "red", size=.5)+
  theme(plot.title = element_text(color="black", size=22, face="bold"), # the remaining lines set font and size
        axis.title.x = element_text(color="black", size=14),
        axis.title.y = element_text(color="black", size=14)) +
  theme(text=element_text(family="Times New Roman"),panel.grid.minor = element_blank())
dev.off()

###################################
### Figure 10: Feature Awareness ###
###################################

awareness  <- read.csv("awareness.csv")



# Breakdown of consumer awareness of various vehicle safety features, this factor list will help reorder variables in later graphing

awareness$Technology <- factor(awareness$Technology,levels=c("Blind spot monitor",
                    "Lane departure warning system",
                    "Parking assistance",
                    "Lane keep assistance",
                    "Forward collision warning",
                    "Collision avoidance system",
                    "Automatic parking",
                    "Adaptive cruise control",
                    "Surround view system",
                    "Pedestrian protection system",
                    "Highway autopilot",
                    "Driver drowsiness detection",
                    "Intelligent speed adaption",
                    "Night vision",
                    "Emergency driver assistant",
                    "Intersection assistant",
                    "Traffic sign recognition"))


png("featureAwareness.png", units="in", width=10, height=10, res=300) 


ggplot(data=awareness, aes(x=Technology, y=Percentage, fill=forcats::fct_rev(Familiarity))) +
  #guides(fill = guide_legend(reverse = TRUE,labels=c("1. Familiar","B","C")))+
  #scale_fill_discrete(name = "Dose", labels = c("A", "B", "C")) +
  geom_bar(stat="identity",position="stack")+
  coord_flip()+
  scale_fill_brewer(palette = "Paired",name = "Familiarity", labels = c("Not Familiar", "Familiar", "Very Familiar")) +
  guides(fill = guide_legend(reverse = TRUE))+
  ggtitle("Vehicle Feature Awareness") + # main chart title
  xlab("Feature") + ylab("Percentage") + # set axis titles
  theme(panel.background = element_rect(fill = 'white', colour = 'white')) + #removed grey background
  scale_y_continuous(expand=c(0,0),limits=c(0,100)) + # remove buffer on y-axis, makes graph cleaner
  theme_minimal() + 
 # scale_y_continuous(limits = c(0, 100))+
  removeGrid(x = FALSE)+
  theme(plot.title = element_text(color="black", size=22, face="bold",family="Times New Roman"),
        axis.title.x = element_text(color="black", size=16,family="Times New Roman"),
        axis.title.y = element_text(color="black", size=16,family="Times New Roman"),
        axis.text = element_text(size = 14,family="Times New Roman")) +
  theme(legend.text=element_text(size=14,family="Times New Roman"),
        legend.title=element_text(size=16))+
  theme(text=element_text(family="Times New Roman"),panel.grid.minor = element_blank())
#+ guides(fill = guide_legend(reverse = TRUE))

dev.off()



###########################################################################
### Other Figures: Sensor Growth and alternate Feature Awareness layout ###
###########################################################################

# graph for sensors growth, may be removed from final presentation

sensors  <- read.csv("sensors.csv")

sensors$Year<-as.Date(sensors$Year, "%Y")

sensors$Year <- as.POSIXct(sensors$Year)
png("sensorGrowth.png", units="in", width=4, height=3, res=300) # second tiff file, this is a zommed in view of Texas to show urban rings

ggplot(data=sensors, aes(x=Year, y=Billions)) +
  geom_line(stat="identity")+
  scale_fill_brewer(palette = "Paired")

dev.off()

##########################################################

# here is a version of the feature awareness plot with the axes swapped and labels rotated, again, unlikely to be used in final presentation.

png("featureAwareness2.png", units="in", width=8.5, height=10, res=300)

ggplot(data=awareness, aes(x=Technology, y=Percentage, fill=Familiarity)) +
  #guides(fill = guide_legend(reverse = TRUE,labels=c("1. Familiar","B","C")))+
  #scale_fill_discrete(name = "Dose", labels = c("A", "B", "C")) +
  geom_bar(stat="identity",position="dodge")+
  #coord_flip()+
  scale_fill_brewer(palette = "Paired",name = "Familiarity", labels = c("Familiar", "Very Familiar", "Not Familiar")) +
  guides(fill = guide_legend(reverse = TRUE))+
  ggtitle("Vehicle Feature Awareness") + # main chart title
  xlab("Feature") + ylab("Percentage") + # set axis titles
  theme(panel.background = element_rect(fill = 'white', colour = 'white')) + #removed grey background
  scale_y_continuous(expand=c(0,0),limits=c(0,100)) + # remove buffer on y-axis, makes graph cleaner
  theme_minimal() + 
  # scale_y_continuous(limits = c(0, 100))+
  removeGrid(y = FALSE)+
  theme(plot.title = element_text(color="black", size=22, face="bold",family="Times New Roman"),
        axis.title.x = element_text(color="black", size=14,family="Times New Roman"),
        axis.title.y = element_text(color="black", size=14,family="Times New Roman")) +
  theme(text=element_text(family="Times New Roman"),panel.grid.minor = element_blank())+
  theme(axis.text.x = element_text(angle = 90))
#+ guides(fill = guide_legend(reverse = TRUE))

dev.off()

